#include "token.h"

#include <iostream>

namespace {


const char *type_name(const Token::Type &type) {

#define TYPE_NAME(name) case Token::Type::name: return #name;
	switch(type) {
		TYPE_NAME(SEMICOLON)
		TYPE_NAME(DO)
		TYPE_NAME(END)
		TYPE_NAME(WHILE)
		TYPE_NAME(REPEAT)
		TYPE_NAME(UNTIL)
		TYPE_NAME(IF)
		TYPE_NAME(THEN)
		TYPE_NAME(ELSEIF)
		TYPE_NAME(FOR)
		TYPE_NAME(IN)
		TYPE_NAME(FUNCTION)
		TYPE_NAME(LOCAL)
		TYPE_NAME(RETURN)
		TYPE_NAME(BREAK)
		TYPE_NAME(DOT)
		TYPE_NAME(COLON)
		TYPE_NAME(COMMA)
		TYPE_NAME(ASSIGN)
		TYPE_NAME(LEFT_SQUARE_BRACKET)
		TYPE_NAME(RIGHT_SQUARE_BRACKET)
		TYPE_NAME(LEFT_CURLY_BRACKET)
		TYPE_NAME(RIGHT_CURLY_BRACKET)
		TYPE_NAME(LEFT_CURLY_PARENTHESIS)
		TYPE_NAME(RIGHT_CURLY_PARENTHESIS)
		TYPE_NAME(NIL)
		TYPE_NAME(FALSE)
		TYPE_NAME(TRUE)
		TYPE_NAME(VARGS)
		TYPE_NAME(NUMBER)
		TYPE_NAME(STRING)
		TYPE_NAME(ADD)
		TYPE_NAME(SUB)
		TYPE_NAME(MUL)
		TYPE_NAME(DIV)
		TYPE_NAME(POW)
		TYPE_NAME(MOD)
		TYPE_NAME(CONCAT)
		TYPE_NAME(LESS)
		TYPE_NAME(LESS_EQUAL)
		TYPE_NAME(GREAT)
		TYPE_NAME(GREAT_EQUAL)
		TYPE_NAME(EQUAL)
		TYPE_NAME(NOT_EQUAL)
		TYPE_NAME(AND)
		TYPE_NAME(VAR)
		TYPE_NAME(OR)
		default:
			return "no-name";
	}

#undef TYPE_NAME
}


};

void Token::print() {
	std::cout << type_name(type_) << " " << text_;
}